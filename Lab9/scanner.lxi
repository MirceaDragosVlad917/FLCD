%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"
int lines = 0;
%}

%option noyywrap
%x CMNT

WORD		\'[0-9a-zA-Z]+\'
INTEGER         [+-]?(0|[1-9][0-9]*)
CONSTVAR		{WORD}|{INTEGER}|{QUOTED_MESSAGE}
ID 		    [a-zA-Z][a-zA-Z0-9]*
QUOTED_MESSAGE   \"[^\"]*\"
SEPARATOR   "\""

%%

"#" {BEGIN CMNT;}
<CMNT>. {;}
<CMNT>\n {++lines; BEGIN INITIAL;}
\n {
    printf("new line\n");
++lines;
return NEW_LINE;
}

for	{printf( "Reserved word: %s\n", yytext); return FOR;}
bool	{printf( "Reserved word: %s\n", yytext); return BOOL;}
string	{printf( "Reserved word: %s\n", yytext); return STRING;}
if	{printf( "Reserved word: %s\n", yytext); return IF;}
in	{printf( "Reserved word: %s\n", yytext); return IN;}
range	{printf( "Reserved word: %s\n", yytext); return RANGE;}
else	{printf( "Reserved word: %s\n", yytext); return ELSE;}
do	{printf( "Reserved word: %s\n", yytext); return DO;}
then	{printf( "Reserved word: %s\n", yytext); return THEN;}
print	{printf( "Reserved word: %s\n", yytext); return PRINT;}
read	{printf( "Reserved word: %s\n", yytext); return READ;}
while	{printf( "Reserved word: %s\n", yytext); return WHILE;}

"{"	{printf( "Separator: %s\n", yytext ); return CURLY_BRACKET_OPEN;}
"}"	{printf( "Separator: %s\n", yytext ); return CURLY_BRACKET_CLOSE;}
"("	{printf( "Separator: %s\n", yytext ); return OPENED_PARENTHESIS;}
")"	{printf( "Separator: %s\n", yytext ); return CLOSED_PARENTHESIS;}
"["	{printf( "Separator: %s\n", yytext ); return SQUARE_BRACKET_OPEN;}
"]"	{printf( "Separator: %s\n", yytext ); return SQUARE_BRACKET_CLOSE;}
";"	{printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	{printf( "Separator: %s\n", yytext ); return COMMA;}
":"	{printf( "Separator: %s\n", yytext ); return ENUMERATION_SIGN;}
"+"	{printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	{printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	{printf( "Operator: %s\n", yytext ); return MUL;}
"//" {printf( "Operator: %s\n", yytext ); return DIV;}
"%" {printf( "Operator: %s\n", yytext ); return MOD;}
"$"	{printf( "Operator: %s\n", yytext ); return ASSIGN;}
"<"	{printf( "Operator: %s\n", yytext ); return LESS;}
">"	{printf( "Operator: %s\n", yytext ); return GREATER;}
"<=" {printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL;}
">=" {printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL;}
"==" {printf( "Operator: %s\n", yytext ); return EQUALS;}
"!=" {printf( "Operator: %s\n", yytext ); return NOT_EQUAL;}
"&&" {printf( "Operator: %s\n", yytext ); return AND;}
"||" {printf( "Operator: %s\n", yytext ); return OR;}
"!" {printf( "Operator: %s\n", yytext ); return NOT;}

{ID}	{printf( "Identifier: %s\n", yytext); return ID;}
{CONSTVAR}	{printf( "Constant: %s\n", yytext ); return CONSTVAR;}


[ \t]+  	{}
[\n]+ {lines++;}

[+-]?0[0-9]*    {printf("Lexical error: Cannot classify constant %s at line %d\n", yytext, lines); return -1;}
[0-9~@#$%^][a-zA-Z0-9]{0,7}	    {printf("Lexical error: Cannot classify identifier %s at line %d\n", yytext, lines); return -1;}
.   {printf("Lexical error: Cannot classify symbol %s at line %d\n", yytext, lines); return -1;}

%%
