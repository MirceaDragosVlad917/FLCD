%{
#include <stdio.h>
#include <string.h>
int lines = 0;
%}

%option noyywrap
%option caseless

WORD		\'[0-9a-zA-Z]+\'
INT         [+-]?(0|[1-9][0-9]*)
CONST		{WORD}|{INT}|{STRING_CONST}
ID 		    [a-zA-Z][a-zA-Z0-9]*
STRING_CONST   \"[^\"]*\"
SEPARATOR   "\""

%%

for	{printf( "Reserved word: %s\n", yytext);}
if	{printf( "Reserved word: %s\n", yytext);}
in	{printf( "Reserved word: %s\n", yytext);}
array	{printf( "Reserved word: %s\n", yytext);}
const	{printf( "Reserved word: %s\n", yytext);}
range	{printf( "Reserved word: %s\n", yytext);}
else	{printf( "Reserved word: %s\n", yytext);}
do	{printf( "Reserved word: %s\n", yytext);}
then	{printf( "Reserved word: %s\n", yytext);}
print	{printf( "Reserved word: %s\n", yytext);}
read	{printf( "Reserved word: %s\n", yytext);}
char	{printf( "Reserved word: %s\n", yytext);}
while	{printf( "Reserved word: %s\n", yytext);}

"{"	{printf( "Separator: %s\n", yytext );}
"}"	{printf( "Separator: %s\n", yytext );}
"("	{printf( "Separator: %s\n", yytext );}
")"	{printf( "Separator: %s\n", yytext );}
"["	{printf( "Separator: %s\n", yytext );}
"]"	{printf( "Separator: %s\n", yytext );}
";"	{printf( "Separator: %s\n", yytext );}
","	{printf( "Separator: %s\n", yytext );}
":"	{printf( "Separator: %s\n", yytext );}
""	{printf( "Separator: %s\n", yytext );}
"+"	{printf( "Operator: %s\n", yytext );}
"-"	{printf( "Operator: %s\n", yytext );}
"*"	{printf( "Operator: %s\n", yytext );}
"//" {printf( "Operator: %s\n", yytext );}
"%" {printf( "Operator: %s\n", yytext );}
"$"	{printf( "Separator: %s\n", yytext );}
"<"	{printf( "Operator: %s\n", yytext );}
">"	{printf( "Operator: %s\n", yytext );}
"<=" {printf( "Operator: %s\n", yytext );}
">=" {printf( "Operator: %s\n", yytext );}
"==" {printf( "Operator: %s\n", yytext );}
"!=" {printf( "Operator: %s\n", yytext );}
"&&" {printf( "Operator: %s\n", yytext );}
"||" {printf( "Operator: %s\n", yytext );}

{ID}	{printf( "Identifier: %s\n", yytext);}
{CONST}	{printf( "Constant: %s\n", yytext );}


[ \t]+  	{}
[\n]+ {lines++;}

[+-]?0[0-9]*    {printf("Lexical error: Cannot classify constant %s at line %d\n", yytext, lines); return -1;}
[0-9~@#$%^][a-zA-Z0-9]{0,7}	    {printf("Lexical error: Cannot classify identifier %s at line %d\n", yytext, lines); return -1;}
.   {printf("Lexical error: Cannot classify symbol %s at line %d\n", yytext, lines); return -1;}
["][a-zA-Z0-9]+|[a-zA-Z0-9]+["]        {printf("Lexical error: Illegal string constant at line %d\n", lines); return -1;}

%%

int main(int argc, char **argv )
{
    if ( argc > 1 )
        yyin = fopen(argv[1], "r");
    else
        yyin = stdin;
    yylex();

}