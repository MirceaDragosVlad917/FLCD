%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"

int lines = 0;
%}

%option noyywrap
%option caseless

WORD		\'[0-9a-zA-Z]+\'
NUMBER		[+-]?[1-9][0-9]*|0$
CONST		{WORD}|{NUMBER}
ID 		[a-zA-Z][a-zA-Z0-9]*


%%

for	{printf( "Reserved word: %s\n", yytext); return FOR;}
if	{printf( "Reserved word: %s\n", yytext); return IF;}
in	{printf( "Reserved word: %s\n", yytext); return IN;}
number	{printf( "Reserved word: %s\n", yytext); return NUMBER;}
or	{printf( "Reserved word: %s\n", yytext); return OR;}
and	{printf( "Reserved word: %s\n", yytext); return AND;}
print	{printf( "Reserved word: %s\n", yytext); return PRINT;}
read	{printf( "Reserved word: %s\n", yytext); return READ;}
string	{printf( "Reserved word: %s\n", yytext); return STRING;}
while	{printf( "Reserved word: %s\n", yytext); return WHILE;}

"{"	{printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}"	{printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"("	{printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")"	{printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
"["	{printf( "Separator: %s\n", yytext ); return OPEN_RIGHT_BRACKET;}
"]"	{printf( "Separator: %s\n", yytext ); return CLOSED_RIGHT_BRACKET;}
"+"	{printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	{printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	{printf( "Operator: %s\n", yytext ); return MUL;}
"/"	{printf( "Operator: %s\n", yytext ); return DIV;}
"$"	{printf( "Separator: %s\n", yytext ); return ATRIB;}
"%"	{printf( "Operator: %s\n", yytext ); return MOD;}
";"	{printf( "Operator: %s\n", yytext ); return SEMI_COLON;}
","	{printf( "Operator: %s\n", yytext ); return COMMA;}
"'"	{printf( "Operator: %s\n", yytext ); return APOSTROPHE;}

%%